@DependencyGraph(scope = AppScope::class, bindingContainers = [Bindings::class])
interface AppGraph {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @MetroImplMarker
  class Impl : AppGraph {
    private val thisGraphInstance: AppGraph
      field = <this>

    private val thisGraphInstanceProvider: Provider<AppGraph>
      field = Companion.invoke<AppGraph>(value = <this>.#thisGraphInstance)

    private val stringProvider: Provider<String>
      field = Companion.provider<Provider<String>, String>(delegate = Companion.create(instance = <this>.#thisGraphInstance))

    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override val optional: Optional<String>
      override get(): Optional<String> {
        return of<String>(p0 = <this>.#stringProvider.invoke())
      }

  }

  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @GraphFactoryInvokeFunctionMarker
    operator fun invoke(): AppGraph {
      return Impl()
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @CallableMetadata(callableName = "string", propertyName = "string", startOffset = 211, endOffset = 282)
  class GetStringMetroFactory : Factory<String> {
    private /* final field */ val instance: AppGraph = instance
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(instance: AppGraph): Factory<String> {
        return GetStringMetroFactory(instance = instance)
      }

      fun getString(instance: AppGraph): String {
        return instance.<get-string>()
      }

    }

    private constructor(instance: AppGraph) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): String {
      return Companion.getString(instance = <this>.#instance)
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(): String {
      return error(message = "Never called")
    }

  }

  abstract val optional: Optional<String>
    abstract get

  @Provides
  @SingleIn(scope = AppScope::class)
  val string: String
    get(): String {
      return "Hello"
    }

}

@Module
interface Bindings {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  abstract class BindsMirror {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @BindsOptionalOf
    @CallableMetadata(callableName = "string", propertyName = "", startOffset = 350, endOffset = 370)
    abstract fun string_opt(): String

  }

  @BindsOptionalOf
  abstract fun string(): String

}

