

package dev.zacsweers.metro.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link dev.zacsweers.metro.compiler.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler-tests/src/test/data/box")
@TestDataPath("$PROJECT_ROOT")
public class BoxTestGenerated extends AbstractBoxTest {
  @Test
  public void testAllFilesPresentInBox() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/aggregation")
  @TestDataPath("$PROJECT_ROOT")
  public class Aggregation {
    @Test
    public void testAllFilesPresentInAggregation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/aggregation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("ComputedPropertiesIntoSet.kt")
    public void testComputedPropertiesIntoSet() {
      runTest("compiler-tests/src/test/data/box/aggregation/ComputedPropertiesIntoSet.kt");
    }

    @Test
    @TestMetadata("ContributedBindingContainerExclusions.kt")
    public void testContributedBindingContainerExclusions() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributedBindingContainerExclusions.kt");
    }

    @Test
    @TestMetadata("ContributedBindingContainerGetsExcluded.kt")
    public void testContributedBindingContainerGetsExcluded() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributedBindingContainerGetsExcluded.kt");
    }

    @Test
    @TestMetadata("ContributedBindingContainerGetsExcludedInContributedGraph.kt")
    public void testContributedBindingContainerGetsExcludedInContributedGraph() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributedBindingContainerGetsExcludedInContributedGraph.kt");
    }

    @Test
    @TestMetadata("ContributedBindingContainerReplacements.kt")
    public void testContributedBindingContainerReplacements() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributedBindingContainerReplacements.kt");
    }

    @Test
    @TestMetadata("ContributedBindingContainerReplacesContributedBinding.kt")
    public void testContributedBindingContainerReplacesContributedBinding() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributedBindingContainerReplacesContributedBinding.kt");
    }

    @Test
    @TestMetadata("ContributedBindingContainerReplacesContributedBindingInContributedGraph.kt")
    public void testContributedBindingContainerReplacesContributedBindingInContributedGraph() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributedBindingContainerReplacesContributedBindingInContributedGraph.kt");
    }

    @Test
    @TestMetadata("ContributingMultibileNullableBindings.kt")
    public void testContributingMultibileNullableBindings() {
      runTest("compiler-tests/src/test/data/box/aggregation/ContributingMultibileNullableBindings.kt");
    }

    @Test
    @TestMetadata("ExcludeBindingContainerWithOrigin.kt")
    public void testExcludeBindingContainerWithOrigin() {
      runTest("compiler-tests/src/test/data/box/aggregation/ExcludeBindingContainerWithOrigin.kt");
    }

    @Test
    @TestMetadata("ExcludeBindingContainerWithOriginInExtension.kt")
    public void testExcludeBindingContainerWithOriginInExtension() {
      runTest("compiler-tests/src/test/data/box/aggregation/ExcludeBindingContainerWithOriginInExtension.kt");
    }

    @Test
    @TestMetadata("ExcludesWithOrigin.kt")
    public void testExcludesWithOrigin() {
      runTest("compiler-tests/src/test/data/box/aggregation/ExcludesWithOrigin.kt");
    }

    @Test
    @TestMetadata("ExcludesWithOriginInExtension.kt")
    public void testExcludesWithOriginInExtension() {
      runTest("compiler-tests/src/test/data/box/aggregation/ExcludesWithOriginInExtension.kt");
    }

    @Test
    @TestMetadata("InternalHintsInContributedGraph.kt")
    public void testInternalHintsInContributedGraph() {
      runTest("compiler-tests/src/test/data/box/aggregation/InternalHintsInContributedGraph.kt");
    }

    @Test
    @TestMetadata("InternalHintsInGraph.kt")
    public void testInternalHintsInGraph() {
      runTest("compiler-tests/src/test/data/box/aggregation/InternalHintsInGraph.kt");
    }

    @Test
    @TestMetadata("MultipleBindingReplacementsFromSameClass.kt")
    public void testMultipleBindingReplacementsFromSameClass() {
      runTest("compiler-tests/src/test/data/box/aggregation/MultipleBindingReplacementsFromSameClass.kt");
    }

    @Test
    @TestMetadata("MultipleBindingReplacementsFromSameClassAndSameModule.kt")
    public void testMultipleBindingReplacementsFromSameClassAndSameModule() {
      runTest("compiler-tests/src/test/data/box/aggregation/MultipleBindingReplacementsFromSameClassAndSameModule.kt");
    }

    @Test
    @TestMetadata("MultipleBindingReplacementsFromSameClassAndSameModuleAndDifferentScopes.kt")
    public void testMultipleBindingReplacementsFromSameClassAndSameModuleAndDifferentScopes() {
      runTest("compiler-tests/src/test/data/box/aggregation/MultipleBindingReplacementsFromSameClassAndSameModuleAndDifferentScopes.kt");
    }

    @Test
    @TestMetadata("MultipleBindingReplacementsFromSameClassDifferentScopes.kt")
    public void testMultipleBindingReplacementsFromSameClassDifferentScopes() {
      runTest("compiler-tests/src/test/data/box/aggregation/MultipleBindingReplacementsFromSameClassDifferentScopes.kt");
    }

    @Test
    @TestMetadata("ReplacementsWithOrigin.kt")
    public void testReplacementsWithOrigin() {
      runTest("compiler-tests/src/test/data/box/aggregation/ReplacementsWithOrigin.kt");
    }

    @Test
    @TestMetadata("ReplacementsWithOriginInExtension.kt")
    public void testReplacementsWithOriginInExtension() {
      runTest("compiler-tests/src/test/data/box/aggregation/ReplacementsWithOriginInExtension.kt");
    }

    @Test
    @TestMetadata("ReplacementsWorkInGraphExtensions.kt")
    public void testReplacementsWorkInGraphExtensions() {
      runTest("compiler-tests/src/test/data/box/aggregation/ReplacementsWorkInGraphExtensions.kt");
    }

    @Test
    @TestMetadata("ScopedContributedBindingCanBeAccessedFromChildWithClassHintsEnabled.kt")
    public void testScopedContributedBindingCanBeAccessedFromChildWithClassHintsEnabled() {
      runTest("compiler-tests/src/test/data/box/aggregation/ScopedContributedBindingCanBeAccessedFromChildWithClassHintsEnabled.kt");
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/aggregation/interop")
    @TestDataPath("$PROJECT_ROOT")
    public class Interop {
      @Test
      public void testAllFilesPresentInInterop() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/aggregation/interop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("ContributedGraphsSupportIgnoreQualifier.kt")
      public void testContributedGraphsSupportIgnoreQualifier() {
        runTest("compiler-tests/src/test/data/box/aggregation/interop/ContributedGraphsSupportIgnoreQualifier.kt");
      }

      @Test
      @TestMetadata("ContributedGraphsSupportRankings.kt")
      public void testContributedGraphsSupportRankings() {
        runTest("compiler-tests/src/test/data/box/aggregation/interop/ContributedGraphsSupportRankings.kt");
      }

      @Test
      @TestMetadata("ContributesMultibindingInteropAnnotationsAddBindingToSetOrMapWithMapKey.kt")
      public void testContributesMultibindingInteropAnnotationsAddBindingToSetOrMapWithMapKey() {
        runTest("compiler-tests/src/test/data/box/aggregation/interop/ContributesMultibindingInteropAnnotationsAddBindingToSetOrMapWithMapKey.kt");
      }

      @Test
      @TestMetadata("ExcludesWithOriginInterop.kt")
      public void testExcludesWithOriginInterop() {
        runTest("compiler-tests/src/test/data/box/aggregation/interop/ExcludesWithOriginInterop.kt");
      }

      @Test
      @TestMetadata("RepeatedContributesBindingAnvilInteropWorksForBoundTypeAndIgnoreQualifier.kt")
      public void testRepeatedContributesBindingAnvilInteropWorksForBoundTypeAndIgnoreQualifier() {
        runTest("compiler-tests/src/test/data/box/aggregation/interop/RepeatedContributesBindingAnvilInteropWorksForBoundTypeAndIgnoreQualifier.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/bindingcontainers")
  @TestDataPath("$PROJECT_ROOT")
  public class Bindingcontainers {
    @Test
    public void testAllFilesPresentInBindingcontainers() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/bindingcontainers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("ContributedAcrossModules.kt")
    public void testContributedAcrossModules() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/ContributedAcrossModules.kt");
    }

    @Test
    @TestMetadata("ContributedAcrossModulesToContributedGraphs.kt")
    public void testContributedAcrossModulesToContributedGraphs() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/ContributedAcrossModulesToContributedGraphs.kt");
    }

    @Test
    @TestMetadata("ContributedEmpty.kt")
    public void testContributedEmpty() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/ContributedEmpty.kt");
    }

    @Test
    @TestMetadata("ContributedWithOnlyMultibinds.kt")
    public void testContributedWithOnlyMultibinds() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/ContributedWithOnlyMultibinds.kt");
    }

    @Test
    @TestMetadata("ContributingBindingWithAdditionalScopes.kt")
    public void testContributingBindingWithAdditionalScopes() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/ContributingBindingWithAdditionalScopes.kt");
    }

    @Test
    @TestMetadata("DedupeContainersContributedToMultipleScopes.kt")
    public void testDedupeContainersContributedToMultipleScopes() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/DedupeContainersContributedToMultipleScopes.kt");
    }

    @Test
    @TestMetadata("MultibindsOnlyInContainer.kt")
    public void testMultibindsOnlyInContainer() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/MultibindsOnlyInContainer.kt");
    }

    @Test
    @TestMetadata("PrivateBindsProperty.kt")
    public void testPrivateBindsProperty() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/PrivateBindsProperty.kt");
    }

    @Test
    @TestMetadata("SimpleContainersWithHintsWork.kt")
    public void testSimpleContainersWithHintsWork() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/SimpleContainersWithHintsWork.kt");
    }

    @Test
    @TestMetadata("TransitiveContributedContainersInContributedGraphs.kt")
    public void testTransitiveContributedContainersInContributedGraphs() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/TransitiveContributedContainersInContributedGraphs.kt");
    }

    @Test
    @TestMetadata("TransitiveContributedContainersInRootGraphs.kt")
    public void testTransitiveContributedContainersInRootGraphs() {
      runTest("compiler-tests/src/test/data/box/bindingcontainers/TransitiveContributedContainersInRootGraphs.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/contributesgraphextension")
  @TestDataPath("$PROJECT_ROOT")
  public class Contributesgraphextension {
    @Test
    public void testAllFilesPresentInContributesgraphextension() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/contributesgraphextension"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("AsContributionExample.kt")
    public void testAsContributionExample() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/AsContributionExample.kt");
    }

    @Test
    @TestMetadata("ChildGraphIsUsedAsReturnType.kt")
    public void testChildGraphIsUsedAsReturnType() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/ChildGraphIsUsedAsReturnType.kt");
    }

    @Test
    @TestMetadata("ContributedFactoryIsAvailableAsBinding.kt")
    public void testContributedFactoryIsAvailableAsBinding() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/ContributedFactoryIsAvailableAsBinding.kt");
    }

    @Test
    @TestMetadata("ContributesIntoMapFromMultipleSources.kt")
    public void testContributesIntoMapFromMultipleSources() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/ContributesIntoMapFromMultipleSources.kt");
    }

    @Test
    @TestMetadata("ContributingMultipleGraphsToSameParent.kt")
    public void testContributingMultipleGraphsToSameParent() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/ContributingMultipleGraphsToSameParent.kt");
    }

    @Test
    @TestMetadata("ParentIncludesArePropgatedToExtensions.kt")
    public void testParentIncludesArePropgatedToExtensions() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/ParentIncludesArePropgatedToExtensions.kt");
    }

    @Test
    @TestMetadata("ParentIncludesTypesAreSeenByExtensions.kt")
    public void testParentIncludesTypesAreSeenByExtensions() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/ParentIncludesTypesAreSeenByExtensions.kt");
    }

    @Test
    @TestMetadata("ProvidesWithMemberInjection.kt")
    public void testProvidesWithMemberInjection() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/ProvidesWithMemberInjection.kt");
    }

    @Test
    @TestMetadata("QualifiedMemberInjectionPropagatesAcrossModules.kt")
    public void testQualifiedMemberInjectionPropagatesAcrossModules() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/QualifiedMemberInjectionPropagatesAcrossModules.kt");
    }

    @Test
    @TestMetadata("ScopedBindingUsedByExtensionIsExposed.kt")
    public void testScopedBindingUsedByExtensionIsExposed() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/ScopedBindingUsedByExtensionIsExposed.kt");
    }

    @Test
    @TestMetadata("WithContributesBinding.kt")
    public void testWithContributesBinding() {
      runTest("compiler-tests/src/test/data/box/contributesgraphextension/WithContributesBinding.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/cycles")
  @TestDataPath("$PROJECT_ROOT")
  public class Cycles {
    @Test
    public void testAllFilesPresentInCycles() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/cycles"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("AssistedFactoryCycle.kt")
    public void testAssistedFactoryCycle() {
      runTest("compiler-tests/src/test/data/box/cycles/AssistedFactoryCycle.kt");
    }

    @Test
    @TestMetadata("AssistedFactoryCycleWithInjectedType.kt")
    public void testAssistedFactoryCycleWithInjectedType() {
      runTest("compiler-tests/src/test/data/box/cycles/AssistedFactoryCycleWithInjectedType.kt");
    }

    @Test
    @TestMetadata("BindsCycleGraph.kt")
    public void testBindsCycleGraph() {
      runTest("compiler-tests/src/test/data/box/cycles/BindsCycleGraph.kt");
    }

    @Test
    @TestMetadata("CycleGraph.kt")
    public void testCycleGraph() {
      runTest("compiler-tests/src/test/data/box/cycles/CycleGraph.kt");
    }

    @Test
    @TestMetadata("CycleMapGraph.kt")
    public void testCycleMapGraph() {
      runTest("compiler-tests/src/test/data/box/cycles/CycleMapGraph.kt");
    }

    @Test
    @TestMetadata("LongCycle.kt")
    public void testLongCycle() {
      runTest("compiler-tests/src/test/data/box/cycles/LongCycle.kt");
    }

    @Test
    @TestMetadata("SelfCycle.kt")
    public void testSelfCycle() {
      runTest("compiler-tests/src/test/data/box/cycles/SelfCycle.kt");
    }

    @Test
    @TestMetadata("SimpleBindingIntoMulti.kt")
    public void testSimpleBindingIntoMulti() {
      runTest("compiler-tests/src/test/data/box/cycles/SimpleBindingIntoMulti.kt");
    }

    @Test
    @TestMetadata("SmokeTest.kt")
    public void testSmokeTest() {
      runTest("compiler-tests/src/test/data/box/cycles/SmokeTest.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/dependencygraph")
  @TestDataPath("$PROJECT_ROOT")
  public class Dependencygraph {
    @Test
    public void testAllFilesPresentInDependencygraph() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/dependencygraph"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("ContributesCanBeInject.kt")
    public void testContributesCanBeInject() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/ContributesCanBeInject.kt");
    }

    @Test
    @TestMetadata("DefaultAccessorBodiesWorkAcrossModules.kt")
    public void testDefaultAccessorBodiesWorkAcrossModules() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/DefaultAccessorBodiesWorkAcrossModules.kt");
    }

    @Test
    @TestMetadata("ExposingIncludedGraphsDirectly.kt")
    public void testExposingIncludedGraphsDirectly() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/ExposingIncludedGraphsDirectly.kt");
    }

    @Test
    @TestMetadata("GraphFactoriesSupportGenericProviders.kt")
    public void testGraphFactoriesSupportGenericProviders() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/GraphFactoriesSupportGenericProviders.kt");
    }

    @Test
    @TestMetadata("GraphsCanHaveExistingImplClases.kt")
    public void testGraphsCanHaveExistingImplClases() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/GraphsCanHaveExistingImplClases.kt");
    }

    @Test
    @TestMetadata("IncludedGraphsCanStillUseNonGraphs.kt")
    public void testIncludedGraphsCanStillUseNonGraphs() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/IncludedGraphsCanStillUseNonGraphs.kt");
    }

    @Test
    @TestMetadata("IncludedTypesCanBeUsedAsOtherDeps.kt")
    public void testIncludedTypesCanBeUsedAsOtherDeps() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/IncludedTypesCanBeUsedAsOtherDeps.kt");
    }

    @Test
    @TestMetadata("IncludesDeepInheritedInterfacesWork.kt")
    public void testIncludesDeepInheritedInterfacesWork() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/IncludesDeepInheritedInterfacesWork.kt");
    }

    @Test
    @TestMetadata("IncludesGraphOnlyIncludesAccessors.kt")
    public void testIncludesGraphOnlyIncludesAccessors() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/IncludesGraphOnlyIncludesAccessors.kt");
    }

    @Test
    @TestMetadata("InitsAreChunkedBox.kt")
    public void testInitsAreChunkedBox() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/InitsAreChunkedBox.kt");
    }

    @Test
    @TestMetadata("InitsAreChunkedWithCycleBox.kt")
    public void testInitsAreChunkedWithCycleBox() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/InitsAreChunkedWithCycleBox.kt");
    }

    @Test
    @TestMetadata("MultiLevelTransitiveIncludes.kt")
    public void testMultiLevelTransitiveIncludes() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/MultiLevelTransitiveIncludes.kt");
    }

    @Test
    @TestMetadata("MultibindingGraphWithWithScopedSetDeps.kt")
    public void testMultibindingGraphWithWithScopedSetDeps() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/MultibindingGraphWithWithScopedSetDeps.kt");
    }

    @Test
    @TestMetadata("MultipleBindsInSeparateGraphsAreValid.kt")
    public void testMultipleBindsInSeparateGraphsAreValid() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/MultipleBindsInSeparateGraphsAreValid.kt");
    }

    @Test
    @TestMetadata("NoEagerInits.kt")
    public void testNoEagerInits() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/NoEagerInits.kt");
    }

    @Test
    @TestMetadata("NullabilityInContributions.kt")
    public void testNullabilityInContributions() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/NullabilityInContributions.kt");
    }

    @Test
    @TestMetadata("OpenAccessorsInClasses.kt")
    public void testOpenAccessorsInClasses() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/OpenAccessorsInClasses.kt");
    }

    @Test
    @TestMetadata("OverrideCompatibleAccessorsFromContributedInterface.kt")
    public void testOverrideCompatibleAccessorsFromContributedInterface() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/OverrideCompatibleAccessorsFromContributedInterface.kt");
    }

    @Test
    @TestMetadata("OverrideCompatibleAccessorsFromGraph.kt")
    public void testOverrideCompatibleAccessorsFromGraph() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/OverrideCompatibleAccessorsFromGraph.kt");
    }

    @Test
    @TestMetadata("OverrideCompatibleAccessorsFromIncludes.kt")
    public void testOverrideCompatibleAccessorsFromIncludes() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/OverrideCompatibleAccessorsFromIncludes.kt");
    }

    @Test
    @TestMetadata("PrivateBinds.kt")
    public void testPrivateBinds() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/PrivateBinds.kt");
    }

    @Test
    @TestMetadata("PrivateBindsInOtherModule.kt")
    public void testPrivateBindsInOtherModule() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/PrivateBindsInOtherModule.kt");
    }

    @Test
    @TestMetadata("QualifiersWithEnumsWork.kt")
    public void testQualifiersWithEnumsWork() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/QualifiersWithEnumsWork.kt");
    }

    @Test
    @TestMetadata("StaticGraphCompanions.kt")
    public void testStaticGraphCompanions() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/StaticGraphCompanions.kt");
    }

    @Test
    @TestMetadata("StaticGraphCompanionsSeparateModules.kt")
    public void testStaticGraphCompanionsSeparateModules() {
      runTest("compiler-tests/src/test/data/box/dependencygraph/StaticGraphCompanionsSeparateModules.kt");
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/dependencygraph/bindingcontainers")
    @TestDataPath("$PROJECT_ROOT")
    public class Bindingcontainers {
      @Test
      public void testAllFilesPresentInBindingcontainers() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/dependencygraph/bindingcontainers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("BindingContainerViaAnnotation.kt")
      public void testBindingContainerViaAnnotation() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/bindingcontainers/BindingContainerViaAnnotation.kt");
      }

      @Test
      @TestMetadata("BindingContainerViaAnnotationCycleIsOk.kt")
      public void testBindingContainerViaAnnotationCycleIsOk() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/bindingcontainers/BindingContainerViaAnnotationCycleIsOk.kt");
      }

      @Test
      @TestMetadata("BindingContainerViaAnnotationTransitive.kt")
      public void testBindingContainerViaAnnotationTransitive() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/bindingcontainers/BindingContainerViaAnnotationTransitive.kt");
      }

      @Test
      @TestMetadata("BindingContainerViaContributesTo.kt")
      public void testBindingContainerViaContributesTo() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/bindingcontainers/BindingContainerViaContributesTo.kt");
      }

      @Test
      @TestMetadata("BindingContainerViaCreator.kt")
      public void testBindingContainerViaCreator() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/bindingcontainers/BindingContainerViaCreator.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/dependencygraph/dynamic")
    @TestDataPath("$PROJECT_ROOT")
    public class Dynamic {
      @Test
      public void testAllFilesPresentInDynamic() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/dependencygraph/dynamic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("DynamicGraphWithFactory.kt")
      public void testDynamicGraphWithFactory() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/dynamic/DynamicGraphWithFactory.kt");
      }

      @Test
      @TestMetadata("GraphsAreCachedByType.kt")
      public void testGraphsAreCachedByType() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/dynamic/GraphsAreCachedByType.kt");
      }

      @Test
      @TestMetadata("MultiModuleDynamicGraph.kt")
      public void testMultiModuleDynamicGraph() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/dynamic/MultiModuleDynamicGraph.kt");
      }

      @Test
      @TestMetadata("ReplacingBindingContainers.kt")
      public void testReplacingBindingContainers() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/dynamic/ReplacingBindingContainers.kt");
      }

      @Test
      @TestMetadata("ReplacingInstanceKeys.kt")
      public void testReplacingInstanceKeys() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/dynamic/ReplacingInstanceKeys.kt");
      }

      @Test
      @TestMetadata("SimpleDynamicGraph.kt")
      public void testSimpleDynamicGraph() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/dynamic/SimpleDynamicGraph.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/dependencygraph/extensions")
    @TestDataPath("$PROJECT_ROOT")
    public class Extensions {
      @Test
      public void testAllFilesPresentInExtensions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/dependencygraph/extensions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("ExplicitRedundantTransitiveContainersStillWork.kt")
      public void testExplicitRedundantTransitiveContainersStillWork() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ExplicitRedundantTransitiveContainersStillWork.kt");
      }

      @Test
      @TestMetadata("ExtensionsCanBeDeclaredWithoutFactories.kt")
      public void testExtensionsCanBeDeclaredWithoutFactories() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ExtensionsCanBeDeclaredWithoutFactories.kt");
      }

      @Test
      @TestMetadata("ExtensionsUsingDeferredTypesAreValid.kt")
      public void testExtensionsUsingDeferredTypesAreValid() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ExtensionsUsingDeferredTypesAreValid.kt");
      }

      @Test
      @TestMetadata("FactoriesCanBeOnTheGraph.kt")
      public void testFactoriesCanBeOnTheGraph() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/FactoriesCanBeOnTheGraph.kt");
      }

      @Test
      @TestMetadata("FactoryAccessorWhenParentAlsoImplementsFactory.kt")
      public void testFactoryAccessorWhenParentAlsoImplementsFactory() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/FactoryAccessorWhenParentAlsoImplementsFactory.kt");
      }

      @Test
      @TestMetadata("FactoryIncludedBindingContainerInstancesPlumbDown.kt")
      public void testFactoryIncludedBindingContainerInstancesPlumbDown() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/FactoryIncludedBindingContainerInstancesPlumbDown.kt");
      }

      @Test
      @TestMetadata("FactoryIsAccessibleThroughInterop.kt")
      public void testFactoryIsAccessibleThroughInterop() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/FactoryIsAccessibleThroughInterop.kt");
      }

      @Test
      @TestMetadata("IncludesAcrossIntermediateUnpacking.kt")
      public void testIncludesAcrossIntermediateUnpacking() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/IncludesAcrossIntermediateUnpacking.kt");
      }

      @Test
      @TestMetadata("IncludesTypesCanBeAccessibleAsProviders.kt")
      public void testIncludesTypesCanBeAccessibleAsProviders() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/IncludesTypesCanBeAccessibleAsProviders.kt");
      }

      @Test
      @TestMetadata("ManagedBindingContainerInstancesPlumbDown.kt")
      public void testManagedBindingContainerInstancesPlumbDown() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ManagedBindingContainerInstancesPlumbDown.kt");
      }

      @Test
      @TestMetadata("MatchingParentBindingsAreSuperseded.kt")
      public void testMatchingParentBindingsAreSuperseded() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/MatchingParentBindingsAreSuperseded.kt");
      }

      @Test
      @TestMetadata("MultiLevelEmptyExtensions.kt")
      public void testMultiLevelEmptyExtensions() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/MultiLevelEmptyExtensions.kt");
      }

      @Test
      @TestMetadata("MultibindingsFromDifferentScopes.kt")
      public void testMultibindingsFromDifferentScopes() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/MultibindingsFromDifferentScopes.kt");
      }

      @Test
      @TestMetadata("MultipleExtensionFactoriesAreValid.kt")
      public void testMultipleExtensionFactoriesAreValid() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/MultipleExtensionFactoriesAreValid.kt");
      }

      @Test
      @TestMetadata("OverloadedFactoryFunctions.kt")
      public void testOverloadedFactoryFunctions() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/OverloadedFactoryFunctions.kt");
      }

      @Test
      @TestMetadata("ParentBindingsAreAlsoIncluded.kt")
      public void testParentBindingsAreAlsoIncluded() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ParentBindingsAreAlsoIncluded.kt");
      }

      @Test
      @TestMetadata("ParentMultibindingsAreAlsoIncluded.kt")
      public void testParentMultibindingsAreAlsoIncluded() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ParentMultibindingsAreAlsoIncluded.kt");
      }

      @Test
      @TestMetadata("ParentTypesAvailableToExtensionsViaParentClassMemberInjection.kt")
      public void testParentTypesAvailableToExtensionsViaParentClassMemberInjection() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ParentTypesAvailableToExtensionsViaParentClassMemberInjection.kt");
      }

      @Test
      @TestMetadata("ScopedExtensionsWithoutFactoriesShouldBeCached.kt")
      public void testScopedExtensionsWithoutFactoriesShouldBeCached() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ScopedExtensionsWithoutFactoriesShouldBeCached.kt");
      }

      @Test
      @TestMetadata("ScopedExtensionsWithoutFactoriesShouldBeCachedWithOrdering.kt")
      public void testScopedExtensionsWithoutFactoriesShouldBeCachedWithOrdering() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/ScopedExtensionsWithoutFactoriesShouldBeCachedWithOrdering.kt");
      }

      @Test
      @TestMetadata("SimpleExtension.kt")
      public void testSimpleExtension() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/extensions/SimpleExtension.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/dependencygraph/leniency")
    @TestDataPath("$PROJECT_ROOT")
    public class Leniency {
      @Test
      public void testAllFilesPresentInLeniency() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/dependencygraph/leniency"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("UnusedProvidersAreNotValidated.kt")
      public void testUnusedProvidersAreNotValidated() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/leniency/UnusedProvidersAreNotValidated.kt");
      }

      @Test
      @TestMetadata("UnusedProvidersInContainersAreNotValidated.kt")
      public void testUnusedProvidersInContainersAreNotValidated() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/leniency/UnusedProvidersInContainersAreNotValidated.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/dependencygraph/optional")
    @TestDataPath("$PROJECT_ROOT")
    public class Optional {
      @Test
      public void testAllFilesPresentInOptional() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/dependencygraph/optional"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("DefaultWorksWithoutAnnotation.kt")
      public void testDefaultWorksWithoutAnnotation() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/optional/DefaultWorksWithoutAnnotation.kt");
      }

      @Test
      @TestMetadata("OptionalAccessors.kt")
      public void testOptionalAccessors() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/optional/OptionalAccessors.kt");
      }

      @Test
      @TestMetadata("RequiredAnnotationWorksWhenPresent.kt")
      public void testRequiredAnnotationWorksWhenPresent() {
        runTest("compiler-tests/src/test/data/box/dependencygraph/optional/RequiredAnnotationWorksWhenPresent.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/inject")
  @TestDataPath("$PROJECT_ROOT")
  public class Inject {
    @Test
    public void testAllFilesPresentInInject() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/inject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("InjectedConstructorParametersWithGenericsWork.kt")
    public void testInjectedConstructorParametersWithGenericsWork() {
      runTest("compiler-tests/src/test/data/box/inject/InjectedConstructorParametersWithGenericsWork.kt");
    }

    @Test
    @TestMetadata("InjectedFunInterfaceParametersWithLambdaDefaultsWork.kt")
    public void testInjectedFunInterfaceParametersWithLambdaDefaultsWork() {
      runTest("compiler-tests/src/test/data/box/inject/InjectedFunInterfaceParametersWithLambdaDefaultsWork.kt");
    }

    @Test
    @TestMetadata("InjectedFunctionParametersWithLambdaDefaultsWork.kt")
    public void testInjectedFunctionParametersWithLambdaDefaultsWork() {
      runTest("compiler-tests/src/test/data/box/inject/InjectedFunctionParametersWithLambdaDefaultsWork.kt");
    }

    @Test
    @TestMetadata("InjectedPrivateConstructorParametersWithGenericsWork.kt")
    public void testInjectedPrivateConstructorParametersWithGenericsWork() {
      runTest("compiler-tests/src/test/data/box/inject/InjectedPrivateConstructorParametersWithGenericsWork.kt");
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/inject/assisted")
    @TestDataPath("$PROJECT_ROOT")
    public class Assisted {
      @Test
      public void testAllFilesPresentInAssisted() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/inject/assisted"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("AssistedFactoryWithAGenericMethodWorks.kt")
      public void testAssistedFactoryWithAGenericMethodWorks() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/AssistedFactoryWithAGenericMethodWorks.kt");
      }

      @Test
      @TestMetadata("AssistedFactoryWithAProtectedMethodWorks.kt")
      public void testAssistedFactoryWithAProtectedMethodWorks() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/AssistedFactoryWithAProtectedMethodWorks.kt");
      }

      @Test
      @TestMetadata("AssistedFactoryWithAdditionalNonAbstractMethods.kt")
      public void testAssistedFactoryWithAdditionalNonAbstractMethods() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/AssistedFactoryWithAdditionalNonAbstractMethods.kt");
      }

      @Test
      @TestMetadata("AssistedFactoryWithContributesAsInject.kt")
      public void testAssistedFactoryWithContributesAsInject() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/AssistedFactoryWithContributesAsInject.kt");
      }

      @Test
      @TestMetadata("AssistedParametersInLaterOrderWork.kt")
      public void testAssistedParametersInLaterOrderWork() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/AssistedParametersInLaterOrderWork.kt");
      }

      @Test
      @TestMetadata("AssistedTypesCanBeExplicitlyProvided.kt")
      public void testAssistedTypesCanBeExplicitlyProvided() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/AssistedTypesCanBeExplicitlyProvided.kt");
      }

      @Test
      @TestMetadata("AssistedTypesCanBeProvidedWithQualifiers.kt")
      public void testAssistedTypesCanBeProvidedWithQualifiers() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/AssistedTypesCanBeProvidedWithQualifiers.kt");
      }

      @Test
      @TestMetadata("BasicAssistedInject.kt")
      public void testBasicAssistedInject() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/BasicAssistedInject.kt");
      }

      @Test
      @TestMetadata("DefaultAssistedFactoryIsGeneratedInFIR.kt")
      public void testDefaultAssistedFactoryIsGeneratedInFIR() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/DefaultAssistedFactoryIsGeneratedInFIR.kt");
      }

      @Test
      @TestMetadata("DefaultAssistedFactoryWithCustomIdentifiers.kt")
      public void testDefaultAssistedFactoryWithCustomIdentifiers() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/DefaultAssistedFactoryWithCustomIdentifiers.kt");
      }

      @Test
      @TestMetadata("DefaultAssistedFactoryWithDefaultValues.kt")
      public void testDefaultAssistedFactoryWithDefaultValues() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/DefaultAssistedFactoryWithDefaultValues.kt");
      }

      @Test
      @TestMetadata("GenericAssistedParams.kt")
      public void testGenericAssistedParams() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/GenericAssistedParams.kt");
      }

      @Test
      @TestMetadata("GenericAssistedParamsAcrossModules.kt")
      public void testGenericAssistedParamsAcrossModules() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/GenericAssistedParamsAcrossModules.kt");
      }

      @Test
      @TestMetadata("ImplsAreVisibleAcrossModules.kt")
      public void testImplsAreVisibleAcrossModules() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/ImplsAreVisibleAcrossModules.kt");
      }

      @Test
      @TestMetadata("NoAssistedArgsInAssistedInject.kt")
      public void testNoAssistedArgsInAssistedInject() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/NoAssistedArgsInAssistedInject.kt");
      }

      @Test
      @TestMetadata("PreserveNullabilityInRemapping.kt")
      public void testPreserveNullabilityInRemapping() {
        runTest("compiler-tests/src/test/data/box/inject/assisted/PreserveNullabilityInRemapping.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/inject/member")
    @TestDataPath("$PROJECT_ROOT")
    public class Member {
      @Test
      public void testAllFilesPresentInMember() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/inject/member"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("CustomMembersInjectorInstancesCanSatisfyBindings.kt")
      public void testCustomMembersInjectorInstancesCanSatisfyBindings() {
        runTest("compiler-tests/src/test/data/box/inject/member/CustomMembersInjectorInstancesCanSatisfyBindings.kt");
      }

      @Test
      @TestMetadata("CustomMembersInjectorInstancesIntoMap.kt")
      public void testCustomMembersInjectorInstancesIntoMap() {
        runTest("compiler-tests/src/test/data/box/inject/member/CustomMembersInjectorInstancesIntoMap.kt");
      }

      @Test
      @TestMetadata("GenericMemberInjection.kt")
      public void testGenericMemberInjection() {
        runTest("compiler-tests/src/test/data/box/inject/member/GenericMemberInjection.kt");
      }

      @Test
      @TestMetadata("GenericMemberInjectionFromGraph.kt")
      public void testGenericMemberInjectionFromGraph() {
        runTest("compiler-tests/src/test/data/box/inject/member/GenericMemberInjectionFromGraph.kt");
      }

      @Test
      @TestMetadata("GenericMemberInjectionWithDeepAncesors.kt")
      public void testGenericMemberInjectionWithDeepAncesors() {
        runTest("compiler-tests/src/test/data/box/inject/member/GenericMemberInjectionWithDeepAncesors.kt");
      }

      @Test
      @TestMetadata("GenericMemberInjectorRequest.kt")
      public void testGenericMemberInjectorRequest() {
        runTest("compiler-tests/src/test/data/box/inject/member/GenericMemberInjectorRequest.kt");
      }

      @Test
      @TestMetadata("InjectingSubclassWithNoMembersButParentsDo.kt")
      public void testInjectingSubclassWithNoMembersButParentsDo() {
        runTest("compiler-tests/src/test/data/box/inject/member/InjectingSubclassWithNoMembersButParentsDo.kt");
      }

      @Test
      @TestMetadata("MemberInjectorRequest.kt")
      public void testMemberInjectorRequest() {
        runTest("compiler-tests/src/test/data/box/inject/member/MemberInjectorRequest.kt");
      }

      @Test
      @TestMetadata("MemberInjectorRequestAsConstructorParam.kt")
      public void testMemberInjectorRequestAsConstructorParam() {
        runTest("compiler-tests/src/test/data/box/inject/member/MemberInjectorRequestAsConstructorParam.kt");
      }

      @Test
      @TestMetadata("MemberInjectorRequestAsProvidesParam.kt")
      public void testMemberInjectorRequestAsProvidesParam() {
        runTest("compiler-tests/src/test/data/box/inject/member/MemberInjectorRequestAsProvidesParam.kt");
      }

      @Test
      @TestMetadata("MemberInjectorRequestMultipleLocations.kt")
      public void testMemberInjectorRequestMultipleLocations() {
        runTest("compiler-tests/src/test/data/box/inject/member/MemberInjectorRequestMultipleLocations.kt");
      }

      @Test
      @TestMetadata("MemberInjectsInMultibinding.kt")
      public void testMemberInjectsInMultibinding() {
        runTest("compiler-tests/src/test/data/box/inject/member/MemberInjectsInMultibinding.kt");
      }

      @Test
      @TestMetadata("MultiInheritanceMemberInject.kt")
      public void testMultiInheritanceMemberInject() {
        runTest("compiler-tests/src/test/data/box/inject/member/MultiInheritanceMemberInject.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/interop")
  @TestDataPath("$PROJECT_ROOT")
  public class Interop {
    @Test
    public void testAllFilesPresentInInterop() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/interop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/box/interop/dagger")
    @TestDataPath("$PROJECT_ROOT")
    public class Dagger {
      @Test
      public void testAllFilesPresentInDagger() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/interop/dagger"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("AnotherBindsOptionalPresentTest.kt")
      public void testAnotherBindsOptionalPresentTest() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/AnotherBindsOptionalPresentTest.kt");
      }

      @Test
      @TestMetadata("AssistedDaggerFactoryClass.kt")
      public void testAssistedDaggerFactoryClass() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/AssistedDaggerFactoryClass.kt");
      }

      @Test
      @TestMetadata("AssistedDaggerFactoryClassGeneratedByAnvil.kt")
      public void testAssistedDaggerFactoryClassGeneratedByAnvil() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/AssistedDaggerFactoryClassGeneratedByAnvil.kt");
      }

      @Test
      @TestMetadata("AssistedDaggerFactoryClassWithDifferentInputs.kt")
      public void testAssistedDaggerFactoryClassWithDifferentInputs() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/AssistedDaggerFactoryClassWithDifferentInputs.kt");
      }

      @Test
      @TestMetadata("BindsOptionalInAMultibindingCycle.kt")
      public void testBindsOptionalInAMultibindingCycle() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/BindsOptionalInAMultibindingCycle.kt");
      }

      @Test
      @TestMetadata("BindsOptionalOfInterop.kt")
      public void testBindsOptionalOfInterop() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/BindsOptionalOfInterop.kt");
      }

      @Test
      @TestMetadata("ComponentDependenciesAreNotMistakenForScopes.kt")
      public void testComponentDependenciesAreNotMistakenForScopes() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/ComponentDependenciesAreNotMistakenForScopes.kt");
      }

      @Test
      @TestMetadata("DaggerComponentModulesAnnotationInterop.kt")
      public void testDaggerComponentModulesAnnotationInterop() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerComponentModulesAnnotationInterop.kt");
      }

      @Test
      @TestMetadata("DaggerFactoryClassCanBeLoaded.kt")
      public void testDaggerFactoryClassCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerFactoryClassCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("DaggerFactoryClassCanBeLoadedJakarta.kt")
      public void testDaggerFactoryClassCanBeLoadedJakarta() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerFactoryClassCanBeLoadedJakarta.kt");
      }

      @Test
      @TestMetadata("DaggerFactoryClassWithDifferentInputs.kt")
      public void testDaggerFactoryClassWithDifferentInputs() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerFactoryClassWithDifferentInputs.kt");
      }

      @Test
      @TestMetadata("DaggerMemberInjectorCanBeLoaded.kt")
      public void testDaggerMemberInjectorCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerMemberInjectorCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("DaggerMemberInjectorCanBeLoadedFromKotlin.kt")
      public void testDaggerMemberInjectorCanBeLoadedFromKotlin() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerMemberInjectorCanBeLoadedFromKotlin.kt");
      }

      @Test
      @TestMetadata("DaggerModulesAnnotationInterop.kt")
      public void testDaggerModulesAnnotationInterop() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerModulesAnnotationInterop.kt");
      }

      @Test
      @TestMetadata("DaggerMultibindsAllowEmptyByDefault.kt")
      public void testDaggerMultibindsAllowEmptyByDefault() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerMultibindsAllowEmptyByDefault.kt");
      }

      @Test
      @TestMetadata("DaggerProviderFactoryClassInKotlinCanBeLoaded.kt")
      public void testDaggerProviderFactoryClassInKotlinCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/DaggerProviderFactoryClassInKotlinCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("GenericDaggerFactoryClassCanBeLoaded.kt")
      public void testGenericDaggerFactoryClassCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/GenericDaggerFactoryClassCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("IncludesContainersCanTransitivelyIncludeOthers.kt")
      public void testIncludesContainersCanTransitivelyIncludeOthers() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/IncludesContainersCanTransitivelyIncludeOthers.kt");
      }

      @Test
      @TestMetadata("InjectedDaggerLazyInteropWorks.kt")
      public void testInjectedDaggerLazyInteropWorks() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/InjectedDaggerLazyInteropWorks.kt");
      }

      @Test
      @TestMetadata("InjectedJavaxProviderInteropWorks.kt")
      public void testInjectedJavaxProviderInteropWorks() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/InjectedJavaxProviderInteropWorks.kt");
      }

      @Test
      @TestMetadata("JavaxProviderShouldWorkInMap.kt")
      public void testJavaxProviderShouldWorkInMap() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/JavaxProviderShouldWorkInMap.kt");
      }

      @Test
      @TestMetadata("JavaxProviderShouldWorkInSet.kt")
      public void testJavaxProviderShouldWorkInSet() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/JavaxProviderShouldWorkInSet.kt");
      }

      @Test
      @TestMetadata("KotlinDaggerFactoryClassCanBeLoaded.kt")
      public void testKotlinDaggerFactoryClassCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/KotlinDaggerFactoryClassCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("KotlinDaggerObjectFactoryClassCanBeLoaded.kt")
      public void testKotlinDaggerObjectFactoryClassCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/KotlinDaggerObjectFactoryClassCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("MultibindingMapOfProviders.kt")
      public void testMultibindingMapOfProviders() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/MultibindingMapOfProviders.kt");
      }

      @Test
      @TestMetadata("OptionalInACycle.kt")
      public void testOptionalInACycle() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/OptionalInACycle.kt");
      }

      @Test
      @TestMetadata("QualifiedDaggerFactoryClassCanBeLoaded.kt")
      public void testQualifiedDaggerFactoryClassCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/QualifiedDaggerFactoryClassCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("QualifiedDaggerProviderFactoryClassCanBeLoaded.kt")
      public void testQualifiedDaggerProviderFactoryClassCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/QualifiedDaggerProviderFactoryClassCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("QualifiersFromDaggerConstructorParametersAreCarried.kt")
      public void testQualifiersFromDaggerConstructorParametersAreCarried() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/QualifiersFromDaggerConstructorParametersAreCarried.kt");
      }

      @Test
      @TestMetadata("QualifiersFromDaggerMemberInjectorCanBeLoaded.kt")
      public void testQualifiersFromDaggerMemberInjectorCanBeLoaded() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/QualifiersFromDaggerMemberInjectorCanBeLoaded.kt");
      }

      @Test
      @TestMetadata("QualifiersFromDaggerMemberInjectorCanBeLoadedFromKotlin.kt")
      public void testQualifiersFromDaggerMemberInjectorCanBeLoadedFromKotlin() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/QualifiersFromDaggerMemberInjectorCanBeLoadedFromKotlin.kt");
      }

      @Test
      @TestMetadata("QualifiersFromDaggerProviderParamsAreCarried.kt")
      public void testQualifiersFromDaggerProviderParamsAreCarried() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/QualifiersFromDaggerProviderParamsAreCarried.kt");
      }

      @Test
      @TestMetadata("ZeroArgConstructorInjectionGeneratedByAnvil.kt")
      public void testZeroArgConstructorInjectionGeneratedByAnvil() {
        runTest("compiler-tests/src/test/data/box/interop/dagger/ZeroArgConstructorInjectionGeneratedByAnvil.kt");
      }

      @Nested
      @TestMetadata("compiler-tests/src/test/data/box/interop/dagger/anvil")
      @TestDataPath("$PROJECT_ROOT")
      public class Anvil {
        @Test
        public void testAllFilesPresentInAnvil() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/interop/dagger/anvil"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("AnotherAssistedFactoryTest.kt")
        public void testAnotherAssistedFactoryTest() {
          runTest("compiler-tests/src/test/data/box/interop/dagger/anvil/AnotherAssistedFactoryTest.kt");
        }

        @Test
        @TestMetadata("DaggerMergeComponentModulesAnnotationInterop.kt")
        public void testDaggerMergeComponentModulesAnnotationInterop() {
          runTest("compiler-tests/src/test/data/box/interop/dagger/anvil/DaggerMergeComponentModulesAnnotationInterop.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/member")
  @TestDataPath("$PROJECT_ROOT")
  public class Member {
    @Test
    public void testAllFilesPresentInMember() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/member"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("FieldInjectFactory.kt")
    public void testFieldInjectFactory() {
      runTest("compiler-tests/src/test/data/box/member/FieldInjectFactory.kt");
    }

    @Test
    @TestMetadata("InjectOrderOfParentAndChildDoesNotMatter.kt")
    public void testInjectOrderOfParentAndChildDoesNotMatter() {
      runTest("compiler-tests/src/test/data/box/member/InjectOrderOfParentAndChildDoesNotMatter.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/multibindings")
  @TestDataPath("$PROJECT_ROOT")
  public class Multibindings {
    @Test
    public void testAllFilesPresentInMultibindings() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/multibindings"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("DifferentMapWrappingTypes.kt")
    public void testDifferentMapWrappingTypes() {
      runTest("compiler-tests/src/test/data/box/multibindings/DifferentMapWrappingTypes.kt");
    }

    @Test
    @TestMetadata("ElementsIntoSetProperty.kt")
    public void testElementsIntoSetProperty() {
      runTest("compiler-tests/src/test/data/box/multibindings/ElementsIntoSetProperty.kt");
    }

    @Test
    @TestMetadata("LazyMemberInjectedBindings.kt")
    public void testLazyMemberInjectedBindings() {
      runTest("compiler-tests/src/test/data/box/multibindings/LazyMemberInjectedBindings.kt");
    }

    @Test
    @TestMetadata("MultibindingGraphWithWithScopedMapProviderDeps.kt")
    public void testMultibindingGraphWithWithScopedMapProviderDeps() {
      runTest("compiler-tests/src/test/data/box/multibindings/MultibindingGraphWithWithScopedMapProviderDeps.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/box/provides")
  @TestDataPath("$PROJECT_ROOT")
  public class Provides {
    @Test
    public void testAllFilesPresentInProvides() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/box/provides"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("CapitalizedProvides.kt")
    public void testCapitalizedProvides() {
      runTest("compiler-tests/src/test/data/box/provides/CapitalizedProvides.kt");
    }

    @Test
    @TestMetadata("ExplicitlyPrivateProviderAnnotationsArePropagated.kt")
    public void testExplicitlyPrivateProviderAnnotationsArePropagated() {
      runTest("compiler-tests/src/test/data/box/provides/ExplicitlyPrivateProviderAnnotationsArePropagated.kt");
    }

    @Test
    @TestMetadata("ProvidesParametersCanHaveDefaults.kt")
    public void testProvidesParametersCanHaveDefaults() {
      runTest("compiler-tests/src/test/data/box/provides/ProvidesParametersCanHaveDefaults.kt");
    }

    @Test
    @TestMetadata("QualifiersOnDifferentAnnotationSites.kt")
    public void testQualifiersOnDifferentAnnotationSites() {
      runTest("compiler-tests/src/test/data/box/provides/QualifiersOnDifferentAnnotationSites.kt");
    }

    @Test
    @TestMetadata("SimpleFunctionProvider.kt")
    public void testSimpleFunctionProvider() {
      runTest("compiler-tests/src/test/data/box/provides/SimpleFunctionProvider.kt");
    }

    @Test
    @TestMetadata("StatusTransformedPrivateProviderAnnotationsArePropagated.kt")
    public void testStatusTransformedPrivateProviderAnnotationsArePropagated() {
      runTest("compiler-tests/src/test/data/box/provides/StatusTransformedPrivateProviderAnnotationsArePropagated.kt");
    }

    @Test
    @TestMetadata("TransitiveSuccessorScope.kt")
    public void testTransitiveSuccessorScope() {
      runTest("compiler-tests/src/test/data/box/provides/TransitiveSuccessorScope.kt");
    }
  }
}
