

package dev.zacsweers.metro.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link dev.zacsweers.metro.compiler.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler-tests/src/test/data/diagnostic")
@TestDataPath("$PROJECT_ROOT")
public class DiagnosticTestGenerated extends AbstractDiagnosticTest {
  @Test
  public void testAllFilesPresentInDiagnostic() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/aggregation")
  @TestDataPath("$PROJECT_ROOT")
  public class Aggregation {
    @Test
    public void testAllFilesPresentInAggregation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/aggregation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("InternalContributionMissingHint.kt")
    public void testInternalContributionMissingHint() {
      runTest("compiler-tests/src/test/data/diagnostic/aggregation/InternalContributionMissingHint.kt");
    }

    @Test
    @TestMetadata("InternalHintsAreNotVisibleWithoutFriends.kt")
    public void testInternalHintsAreNotVisibleWithoutFriends() {
      runTest("compiler-tests/src/test/data/diagnostic/aggregation/InternalHintsAreNotVisibleWithoutFriends.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/bindingcontainer")
  @TestDataPath("$PROJECT_ROOT")
  public class Bindingcontainer {
    @Test
    @TestMetadata("AbstractContainersCannotHaveProvides.kt")
    public void testAbstractContainersCannotHaveProvides() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/AbstractContainersCannotHaveProvides.kt");
    }

    @Test
    public void testAllFilesPresentInBindingcontainer() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/bindingcontainer"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("CannotAnnotateBothGraphAndContainer.kt")
    public void testCannotAnnotateBothGraphAndContainer() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/CannotAnnotateBothGraphAndContainer.kt");
    }

    @Test
    @TestMetadata("CannotIncludeGenericContainer.kt")
    public void testCannotIncludeGenericContainer() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/CannotIncludeGenericContainer.kt");
    }

    @Test
    @TestMetadata("ContainersCannotExtendOtherContainers.kt")
    public void testContainersCannotExtendOtherContainers() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/ContainersCannotExtendOtherContainers.kt");
    }

    @Test
    @TestMetadata("ContributedContainersMustHaveNoArgConstructors.kt")
    public void testContributedContainersMustHaveNoArgConstructors() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/ContributedContainersMustHaveNoArgConstructors.kt");
    }

    @Test
    @TestMetadata("IllegalTypes.kt")
    public void testIllegalTypes() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/IllegalTypes.kt");
    }

    @Test
    @TestMetadata("IncludedMustBeAContainer.kt")
    public void testIncludedMustBeAContainer() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/IncludedMustBeAContainer.kt");
    }

    @Test
    @TestMetadata("MissingNoArgConstructor.kt")
    public void testMissingNoArgConstructor() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/MissingNoArgConstructor.kt");
    }

    @Test
    @TestMetadata("NoProvidesOnParams.kt")
    public void testNoProvidesOnParams() {
      runTest("compiler-tests/src/test/data/diagnostic/bindingcontainer/NoProvidesOnParams.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/createGraph")
  @TestDataPath("$PROJECT_ROOT")
  public class CreateGraph {
    @Test
    public void testAllFilesPresentInCreateGraph() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/createGraph"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("CreateGraph_GraphHasFactory.kt")
    public void testCreateGraph_GraphHasFactory() {
      runTest("compiler-tests/src/test/data/diagnostic/createGraph/CreateGraph_GraphHasFactory.kt");
    }

    @Test
    @TestMetadata("CreateGraph_MustBeGraph.kt")
    public void testCreateGraph_MustBeGraph() {
      runTest("compiler-tests/src/test/data/diagnostic/createGraph/CreateGraph_MustBeGraph.kt");
    }

    @Test
    @TestMetadata("CreateGraph_MustBeGraphFactory.kt")
    public void testCreateGraph_MustBeGraphFactory() {
      runTest("compiler-tests/src/test/data/diagnostic/createGraph/CreateGraph_MustBeGraphFactory.kt");
    }

    @Test
    @TestMetadata("CreateGraph_OkCase.kt")
    public void testCreateGraph_OkCase() {
      runTest("compiler-tests/src/test/data/diagnostic/createGraph/CreateGraph_OkCase.kt");
    }

    @Test
    @TestMetadata("GraphFactoriesMayNotHaveVarargs.kt")
    public void testGraphFactoriesMayNotHaveVarargs() {
      runTest("compiler-tests/src/test/data/diagnostic/createGraph/GraphFactoriesMayNotHaveVarargs.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/cycles")
  @TestDataPath("$PROJECT_ROOT")
  public class Cycles {
    @Test
    public void testAllFilesPresentInCycles() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/cycles"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("CyclesShouldFailAcrossMultipleGraphs.kt")
    public void testCyclesShouldFailAcrossMultipleGraphs() {
      runTest("compiler-tests/src/test/data/diagnostic/cycles/CyclesShouldFailAcrossMultipleGraphs.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/dependencygraph")
  @TestDataPath("$PROJECT_ROOT")
  public class Dependencygraph {
    @Test
    public void testAllFilesPresentInDependencygraph() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/dependencygraph"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("AsContributionCannotWorkOnContributedExtensions.kt")
    public void testAsContributionCannotWorkOnContributedExtensions() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/AsContributionCannotWorkOnContributedExtensions.kt");
    }

    @Test
    @TestMetadata("AsContributionCannotWorkOnContributedExtensionsMultiModule.kt")
    public void testAsContributionCannotWorkOnContributedExtensionsMultiModule() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/AsContributionCannotWorkOnContributedExtensionsMultiModule.kt");
    }

    @Test
    @TestMetadata("AssistedTypesCannotBeDirectlyQualified.kt")
    public void testAssistedTypesCannotBeDirectlyQualified() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/AssistedTypesCannotBeDirectlyQualified.kt");
    }

    @Test
    @TestMetadata("AssistedTypesCannotBeProvidedWithoutQualifiers.kt")
    public void testAssistedTypesCannotBeProvidedWithoutQualifiers() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/AssistedTypesCannotBeProvidedWithoutQualifiers.kt");
    }

    @Test
    @TestMetadata("ConfigurableMaxIrErrors.kt")
    public void testConfigurableMaxIrErrors() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/ConfigurableMaxIrErrors.kt");
    }

    @Test
    @TestMetadata("GraphsCannotDirectlyExtendOtherGraphs.kt")
    public void testGraphsCannotDirectlyExtendOtherGraphs() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/GraphsCannotDirectlyExtendOtherGraphs.kt");
    }

    @Test
    @TestMetadata("MixedCycleParams.kt")
    public void testMixedCycleParams() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/MixedCycleParams.kt");
    }

    @Test
    @TestMetadata("MultipleMissingDeps.kt")
    public void testMultipleMissingDeps() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/MultipleMissingDeps.kt");
    }

    @Test
    @TestMetadata("UsefulHintsForMissingImplDeps.kt")
    public void testUsefulHintsForMissingImplDeps() {
      runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/UsefulHintsForMissingImplDeps.kt");
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/diagnostic/dependencygraph/dynamic")
    @TestDataPath("$PROJECT_ROOT")
    public class Dynamic {
      @Test
      public void testAllFilesPresentInDynamic() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/dependencygraph/dynamic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("CreateDynamicGraphArgumentDiagnostics.kt")
      public void testCreateDynamicGraphArgumentDiagnostics() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/dynamic/CreateDynamicGraphArgumentDiagnostics.kt");
      }

      @Test
      @TestMetadata("CreateDynamicGraphCannotBeInLocalClasses.kt")
      public void testCreateDynamicGraphCannotBeInLocalClasses() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/dynamic/CreateDynamicGraphCannotBeInLocalClasses.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/diagnostic/dependencygraph/extensions")
    @TestDataPath("$PROJECT_ROOT")
    public class Extensions {
      @Test
      public void testAllFilesPresentInExtensions() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/dependencygraph/extensions"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("ExtensionAccessorsCannotHaveParameters.kt")
      public void testExtensionAccessorsCannotHaveParameters() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/extensions/ExtensionAccessorsCannotHaveParameters.kt");
      }

      @Test
      @TestMetadata("ExtensionsWithFactoriesMustUseThem.kt")
      public void testExtensionsWithFactoriesMustUseThem() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/extensions/ExtensionsWithFactoriesMustUseThem.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/diagnostic/dependencygraph/leniency")
    @TestDataPath("$PROJECT_ROOT")
    public class Leniency {
      @Test
      public void testAllFilesPresentInLeniency() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/dependencygraph/leniency"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("SomeUnusedAndSomeUsed.kt")
      public void testSomeUnusedAndSomeUsed() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/leniency/SomeUnusedAndSomeUsed.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/diagnostic/dependencygraph/optional")
    @TestDataPath("$PROJECT_ROOT")
    public class Optional {
      @Test
      public void testAllFilesPresentInOptional() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/dependencygraph/optional"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("DisabledResultsInMissingBindingMultiModule.kt")
      public void testDisabledResultsInMissingBindingMultiModule() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/DisabledResultsInMissingBindingMultiModule.kt");
      }

      @Test
      @TestMetadata("DisabledResultsInMissingBindings.kt")
      public void testDisabledResultsInMissingBindings() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/DisabledResultsInMissingBindings.kt");
      }

      @Test
      @TestMetadata("DisabledResultsInMissingBindingsEvenWithAnnotation.kt")
      public void testDisabledResultsInMissingBindingsEvenWithAnnotation() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/DisabledResultsInMissingBindingsEvenWithAnnotation.kt");
      }

      @Test
      @TestMetadata("OptionalAccessorDiagnostics.kt")
      public void testOptionalAccessorDiagnostics() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/OptionalAccessorDiagnostics.kt");
      }

      @Test
      @TestMetadata("OptionalBindingErrorIfDisabled.kt")
      public void testOptionalBindingErrorIfDisabled() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/OptionalBindingErrorIfDisabled.kt");
      }

      @Test
      @TestMetadata("OptionalBindingIsNotAllowedOnInjectors.kt")
      public void testOptionalBindingIsNotAllowedOnInjectors() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/OptionalBindingIsNotAllowedOnInjectors.kt");
      }

      @Test
      @TestMetadata("OptionalBindingParamRequiresDefaultValue.kt")
      public void testOptionalBindingParamRequiresDefaultValue() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/OptionalBindingParamRequiresDefaultValue.kt");
      }

      @Test
      @TestMetadata("OptionalBindingParamWarningIfDefault.kt")
      public void testOptionalBindingParamWarningIfDefault() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/OptionalBindingParamWarningIfDefault.kt");
      }

      @Test
      @TestMetadata("RequiredAnnotationResultsInMissingBindingMultiModule.kt")
      public void testRequiredAnnotationResultsInMissingBindingMultiModule() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/RequiredAnnotationResultsInMissingBindingMultiModule.kt");
      }

      @Test
      @TestMetadata("RequiredAnnotationResultsInMissingBindings.kt")
      public void testRequiredAnnotationResultsInMissingBindings() {
        runTest("compiler-tests/src/test/data/diagnostic/dependencygraph/optional/RequiredAnnotationResultsInMissingBindings.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/functioninject")
  @TestDataPath("$PROJECT_ROOT")
  public class Functioninject {
    @Test
    public void testAllFilesPresentInFunctioninject() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/functioninject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("CannotBeScoped.kt")
    public void testCannotBeScoped() {
      runTest("compiler-tests/src/test/data/diagnostic/functioninject/CannotBeScoped.kt");
    }

    @Test
    @TestMetadata("CannotHaveExtensionReceivers.kt")
    public void testCannotHaveExtensionReceivers() {
      runTest("compiler-tests/src/test/data/diagnostic/functioninject/CannotHaveExtensionReceivers.kt");
    }

    @Test
    @TestMetadata("CannotHaveTypeArgs.kt")
    public void testCannotHaveTypeArgs() {
      runTest("compiler-tests/src/test/data/diagnostic/functioninject/CannotHaveTypeArgs.kt");
    }

    @Test
    @TestMetadata("ContextParamsCannotBeOptional.kt")
    public void testContextParamsCannotBeOptional() {
      runTest("compiler-tests/src/test/data/diagnostic/functioninject/ContextParamsCannotBeOptional.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/graph")
  @TestDataPath("$PROJECT_ROOT")
  public class Graph {
    @Test
    public void testAllFilesPresentInGraph() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/graph"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("LazyAssistedFactoryGraphAccessor.kt")
    public void testLazyAssistedFactoryGraphAccessor() {
      runTest("compiler-tests/src/test/data/diagnostic/graph/LazyAssistedFactoryGraphAccessor.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/inject")
  @TestDataPath("$PROJECT_ROOT")
  public class Inject {
    @Test
    public void testAllFilesPresentInInject() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/inject"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("CannotMixProviderOfLazyTypes.kt")
    public void testCannotMixProviderOfLazyTypes() {
      runTest("compiler-tests/src/test/data/diagnostic/inject/CannotMixProviderOfLazyTypes.kt");
    }

    @Test
    @TestMetadata("ConflictingProvidesAndClassScopes.kt")
    public void testConflictingProvidesAndClassScopes() {
      runTest("compiler-tests/src/test/data/diagnostic/inject/ConflictingProvidesAndClassScopes.kt");
    }

    @Test
    @TestMetadata("InjectingAPlainObjectIsSus.kt")
    public void testInjectingAPlainObjectIsSus() {
      runTest("compiler-tests/src/test/data/diagnostic/inject/InjectingAPlainObjectIsSus.kt");
    }

    @Test
    @TestMetadata("ProvidingAConstructorInjectedTypeHasASpecificWarning.kt")
    public void testProvidingAConstructorInjectedTypeHasASpecificWarning() {
      runTest("compiler-tests/src/test/data/diagnostic/inject/ProvidingAConstructorInjectedTypeHasASpecificWarning.kt");
    }

    @Test
    @TestMetadata("SuggestInjectClassOnSingleContructor.kt")
    public void testSuggestInjectClassOnSingleContructor() {
      runTest("compiler-tests/src/test/data/diagnostic/inject/SuggestInjectClassOnSingleContructor.kt");
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/diagnostic/inject/assisted")
    @TestDataPath("$PROJECT_ROOT")
    public class Assisted {
      @Test
      public void testAllFilesPresentInAssisted() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/inject/assisted"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBeAnnotationClasses.kt")
      public void testAssistedFactoriesCannotBeAnnotationClasses() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBeAnnotationClasses.kt");
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBeAnnotationObjects.kt")
      public void testAssistedFactoriesCannotBeAnnotationObjects() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBeAnnotationObjects.kt");
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBeEnums.kt")
      public void testAssistedFactoriesCannotBeEnums() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBeEnums.kt");
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBeFinal.kt")
      public void testAssistedFactoriesCannotBeFinal() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBeFinal.kt");
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBeLocal.kt")
      public void testAssistedFactoriesCannotBeLocal() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBeLocal.kt");
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBePrivate.kt")
      public void testAssistedFactoriesCannotBePrivate() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBePrivate.kt");
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBeProtected.kt")
      public void testAssistedFactoriesCannotBeProtected() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBeProtected.kt");
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBeSealedClasses.kt")
      public void testAssistedFactoriesCannotBeSealedClasses() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBeSealedClasses.kt");
      }

      @Test
      @TestMetadata("AssistedFactoriesCannotBeSealedInterfaces.kt")
      public void testAssistedFactoriesCannotBeSealedInterfaces() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoriesCannotBeSealedInterfaces.kt");
      }

      @Test
      @TestMetadata("AssistedFactoryMustTargetAssistedInjectTypesButMissingConstructor.kt")
      public void testAssistedFactoryMustTargetAssistedInjectTypesButMissingConstructor() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoryMustTargetAssistedInjectTypesButMissingConstructor.kt");
      }

      @Test
      @TestMetadata("AssistedFactoryMustTargetAssistedInjectTypesButMissingReturnType.kt")
      public void testAssistedFactoryMustTargetAssistedInjectTypesButMissingReturnType() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoryMustTargetAssistedInjectTypesButMissingReturnType.kt");
      }

      @Test
      @TestMetadata("AssistedFactoryMustTargetAssistedInjectTypesWithMatchingParameters.kt")
      public void testAssistedFactoryMustTargetAssistedInjectTypesWithMatchingParameters() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoryMustTargetAssistedInjectTypesWithMatchingParameters.kt");
      }

      @Test
      @TestMetadata("AssistedFactoryWithMissingSAM.kt")
      public void testAssistedFactoryWithMissingSAM() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoryWithMissingSAM.kt");
      }

      @Test
      @TestMetadata("AssistedFactoryWithMultipleSAMs.kt")
      public void testAssistedFactoryWithMultipleSAMs() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/AssistedFactoryWithMultipleSAMs.kt");
      }

      @Test
      @TestMetadata("InjectingAssistedInjectClassesIsAnError.kt")
      public void testInjectingAssistedInjectClassesIsAnError() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/InjectingAssistedInjectClassesIsAnError.kt");
      }

      @Test
      @TestMetadata("LazyAssistedFactoryInjection.kt")
      public void testLazyAssistedFactoryInjection() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/assisted/LazyAssistedFactoryInjection.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/diagnostic/inject/function")
    @TestDataPath("$PROJECT_ROOT")
    public class Function {
      @Test
      public void testAllFilesPresentInFunction() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/inject/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("LazyAssistedFactoryFunctionInjection.kt")
      public void testLazyAssistedFactoryFunctionInjection() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/function/LazyAssistedFactoryFunctionInjection.kt");
      }
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/diagnostic/inject/member")
    @TestDataPath("$PROJECT_ROOT")
    public class Member {
      @Test
      public void testAllFilesPresentInMember() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/inject/member"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("FunctionMemberInjectsCannotHaveTypeParams.kt")
      public void testFunctionMemberInjectsCannotHaveTypeParams() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/member/FunctionMemberInjectsCannotHaveTypeParams.kt");
      }

      @Test
      @TestMetadata("MembersInjectorParameterWithNoDefaultShouldError.kt")
      public void testMembersInjectorParameterWithNoDefaultShouldError() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/member/MembersInjectorParameterWithNoDefaultShouldError.kt");
      }

      @Test
      @TestMetadata("MissingMemberInjectionShouldFailBinding1.kt")
      public void testMissingMemberInjectionShouldFailBinding1() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/member/MissingMemberInjectionShouldFailBinding1.kt");
      }

      @Test
      @TestMetadata("MissingMemberInjectionShouldFailBinding2.kt")
      public void testMissingMemberInjectionShouldFailBinding2() {
        runTest("compiler-tests/src/test/data/diagnostic/inject/member/MissingMemberInjectionShouldFailBinding2.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/interop")
  @TestDataPath("$PROJECT_ROOT")
  public class Interop {
    @Test
    public void testAllFilesPresentInInterop() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/interop"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Nested
    @TestMetadata("compiler-tests/src/test/data/diagnostic/interop/dagger")
    @TestDataPath("$PROJECT_ROOT")
    public class Dagger {
      @Test
      public void testAllFilesPresentInDagger() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/interop/dagger"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("BindsOptionalOfDiagnostics.kt")
      public void testBindsOptionalOfDiagnostics() {
        runTest("compiler-tests/src/test/data/diagnostic/interop/dagger/BindsOptionalOfDiagnostics.kt");
      }

      @Test
      @TestMetadata("DoNotSuggestMovingInjectAnnotationToClassWhenUsingJavaxOrJakartaInject.kt")
      public void testDoNotSuggestMovingInjectAnnotationToClassWhenUsingJavaxOrJakartaInject() {
        runTest("compiler-tests/src/test/data/diagnostic/interop/dagger/DoNotSuggestMovingInjectAnnotationToClassWhenUsingJavaxOrJakartaInject.kt");
      }

      @Test
      @TestMetadata("MemberInjectionQualifiersAreLookedUp.kt")
      public void testMemberInjectionQualifiersAreLookedUp() {
        runTest("compiler-tests/src/test/data/diagnostic/interop/dagger/MemberInjectionQualifiersAreLookedUp.kt");
      }

      @Test
      @TestMetadata("PositionalAnnotationArgsError.kt")
      public void testPositionalAnnotationArgsError() {
        runTest("compiler-tests/src/test/data/diagnostic/interop/dagger/PositionalAnnotationArgsError.kt");
      }

      @Test
      @TestMetadata("PositionalAnnotationArgsWarning.kt")
      public void testPositionalAnnotationArgsWarning() {
        runTest("compiler-tests/src/test/data/diagnostic/interop/dagger/PositionalAnnotationArgsWarning.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/multibindings")
  @TestDataPath("$PROJECT_ROOT")
  public class Multibindings {
    @Test
    public void testAllFilesPresentInMultibindings() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/multibindings"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("MapKeyDiagnostics.kt")
    public void testMapKeyDiagnostics() {
      runTest("compiler-tests/src/test/data/diagnostic/multibindings/MapKeyDiagnostics.kt");
    }
  }

  @Nested
  @TestMetadata("compiler-tests/src/test/data/diagnostic/provides")
  @TestDataPath("$PROJECT_ROOT")
  public class Provides {
    @Test
    public void testAllFilesPresentInProvides() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler-tests/src/test/data/diagnostic/provides"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("AssistedParametersAreNotSupportedOnProvides.kt")
    public void testAssistedParametersAreNotSupportedOnProvides() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/AssistedParametersAreNotSupportedOnProvides.kt");
    }

    @Test
    @TestMetadata("BindsMayNotHaveScopes.kt")
    public void testBindsMayNotHaveScopes() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/BindsMayNotHaveScopes.kt");
    }

    @Test
    @TestMetadata("BindsNonThisReturningBodiesShouldError_AbstractClass.kt")
    public void testBindsNonThisReturningBodiesShouldError_AbstractClass() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/BindsNonThisReturningBodiesShouldError_AbstractClass.kt");
    }

    @Test
    @TestMetadata("BindsNonThisReturningBodiesShouldError_Interface.kt")
    public void testBindsNonThisReturningBodiesShouldError_Interface() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/BindsNonThisReturningBodiesShouldError_Interface.kt");
    }

    @Test
    @TestMetadata("BindsWithBodiesShouldBePrivate_InAbstractClass.kt")
    public void testBindsWithBodiesShouldBePrivate_InAbstractClass() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/BindsWithBodiesShouldBePrivate_InAbstractClass.kt");
    }

    @Test
    @TestMetadata("BindsWithBodiesShouldBePrivate_InInterface.kt")
    public void testBindsWithBodiesShouldBePrivate_InInterface() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/BindsWithBodiesShouldBePrivate_InInterface.kt");
    }

    @Test
    @TestMetadata("Binds_Interface_OkCase.kt")
    public void testBinds_Interface_OkCase() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/Binds_Interface_OkCase.kt");
    }

    @Test
    @TestMetadata("Binds_interface_BoundTypesMustBeSubtypes.kt")
    public void testBinds_interface_BoundTypesMustBeSubtypes() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/Binds_interface_BoundTypesMustBeSubtypes.kt");
    }

    @Test
    @TestMetadata("Binds_interface_SameTypesCannotHaveSameQualifiers.kt")
    public void testBinds_interface_SameTypesCannotHaveSameQualifiers() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/Binds_interface_SameTypesCannotHaveSameQualifiers.kt");
    }

    @Test
    @TestMetadata("Binds_interface_ShouldNotHaveBodies.kt")
    public void testBinds_interface_ShouldNotHaveBodies() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/Binds_interface_ShouldNotHaveBodies.kt");
    }

    @Test
    @TestMetadata("DaggerReusable_IsUnsupported.kt")
    public void testDaggerReusable_IsUnsupported() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/DaggerReusable_IsUnsupported.kt");
    }

    @Test
    @TestMetadata("LazyAssistedFactoryProvides.kt")
    public void testLazyAssistedFactoryProvides() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/LazyAssistedFactoryProvides.kt");
    }

    @Test
    @TestMetadata("PrivateProviderOption_Error.kt")
    public void testPrivateProviderOption_Error() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/PrivateProviderOption_Error.kt");
    }

    @Test
    @TestMetadata("PrivateProviderOption_None.kt")
    public void testPrivateProviderOption_None() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/PrivateProviderOption_None.kt");
    }

    @Test
    @TestMetadata("ProvidedInjectedClassesWithMatchingTypeKeysAreREportedAsWarnings_Qualified.kt")
    public void testProvidedInjectedClassesWithMatchingTypeKeysAreREportedAsWarnings_Qualified() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidedInjectedClassesWithMatchingTypeKeysAreREportedAsWarnings_Qualified.kt");
    }

    @Test
    @TestMetadata("ProvidedInjectedClassesWithMatchingTypeKeysAreReportedAsWarnings.kt")
    public void testProvidedInjectedClassesWithMatchingTypeKeysAreReportedAsWarnings() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidedInjectedClassesWithMatchingTypeKeysAreReportedAsWarnings.kt");
    }

    @Test
    @TestMetadata("ProvidedInjectedClassesWithMatchingTypeKeysButDifferentScopesAreOk.kt")
    public void testProvidedInjectedClassesWithMatchingTypeKeysButDifferentScopesAreOk() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidedInjectedClassesWithMatchingTypeKeysButDifferentScopesAreOk.kt");
    }

    @Test
    @TestMetadata("ProvidesCannotHaveReceivers_AbstractClass.kt")
    public void testProvidesCannotHaveReceivers_AbstractClass() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesCannotHaveReceivers_AbstractClass.kt");
    }

    @Test
    @TestMetadata("ProvidesCannotHaveReceivers_Interface.kt")
    public void testProvidesCannotHaveReceivers_Interface() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesCannotHaveReceivers_Interface.kt");
    }

    @Test
    @TestMetadata("ProvidesCannotLiveInObjects.kt")
    public void testProvidesCannotLiveInObjects() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesCannotLiveInObjects.kt");
    }

    @Test
    @TestMetadata("ProvidesFunctionsCannotBeTopLevel.kt")
    public void testProvidesFunctionsCannotBeTopLevel() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesFunctionsCannotBeTopLevel.kt");
    }

    @Test
    @TestMetadata("ProvidesMustHaveABody_AbstractClass.kt")
    public void testProvidesMustHaveABody_AbstractClass() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesMustHaveABody_AbstractClass.kt");
    }

    @Test
    @TestMetadata("ProvidesMustHaveABody_Interface.kt")
    public void testProvidesMustHaveABody_Interface() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesMustHaveABody_Interface.kt");
    }

    @Test
    @TestMetadata("ProvidesMustHaveExplicitReturnTypes.kt")
    public void testProvidesMustHaveExplicitReturnTypes() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesMustHaveExplicitReturnTypes.kt");
    }

    @Test
    @TestMetadata("ProvidesNamesMustBeUniqueInContainer.kt")
    public void testProvidesNamesMustBeUniqueInContainer() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesNamesMustBeUniqueInContainer.kt");
    }

    @Test
    @TestMetadata("ProvidesNamesMustBeUniqueInGraph.kt")
    public void testProvidesNamesMustBeUniqueInGraph() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesNamesMustBeUniqueInGraph.kt");
    }

    @Test
    @TestMetadata("ProvidesPropertiesCannotBeMutable.kt")
    public void testProvidesPropertiesCannotBeMutable() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesPropertiesCannotBeMutable.kt");
    }

    @Test
    @TestMetadata("ProvidesShouldBePrivate_InAbstractClass.kt")
    public void testProvidesShouldBePrivate_InAbstractClass() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesShouldBePrivate_InAbstractClass.kt");
    }

    @Test
    @TestMetadata("ProvidesShouldBePrivate_InInterface.kt")
    public void testProvidesShouldBePrivate_InInterface() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesShouldBePrivate_InInterface.kt");
    }

    @Test
    @TestMetadata("ProvidesWithExtensionsAndNonThisReturningBodiesShouldError.kt")
    public void testProvidesWithExtensionsAndNonThisReturningBodiesShouldError() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/ProvidesWithExtensionsAndNonThisReturningBodiesShouldError.kt");
    }

    @Test
    @TestMetadata("Provides_AbstractClass_MayNotHaveTypeParameters.kt")
    public void testProvides_AbstractClass_MayNotHaveTypeParameters() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/Provides_AbstractClass_MayNotHaveTypeParameters.kt");
    }

    @Test
    @TestMetadata("Provides_Interface_MayNotHaveTypeParameters.kt")
    public void testProvides_Interface_MayNotHaveTypeParameters() {
      runTest("compiler-tests/src/test/data/diagnostic/provides/Provides_Interface_MayNotHaveTypeParameters.kt");
    }
  }
}
